Esta API Rest está escrita en PHP sin usar ningún tipo de framework, lo que
le permite ser facilmente escalable a la mayoria de sistemas. 

Hay que tener en cuenta de primeras que los id de las tablas de la base de datos a los que atacaremos tienen que ser enteros autoincrementales para que no de problemas.

Para adaptarla, será necesario hacer unas modificaciones que redactaré a continuación:

- En clases/conexion/config será necesario editar los datos de conexión por los
de la base de datos que necesitemos o vayamos a usar. Ahora están preparados
para ser usados en local en XAMPP.

- En clases/conexion/conexion.php tendremos que buscar está linea:
$this->conexion = new mysqli($this->server,$this->user,$this->password,$this->database,$this->port);
Ese tipo de conexion solo valdrá en el caso de que la base de datos sea
mysql. Si es de otro tipo, tendrás que consultar la documentacion de php para
ver como realizar esta conexión.

- En clases/auth.class.php serán necesarios varios cambios. La función login esta pensada para recibir un
json con este formato:
{
	"email":"usuario@gmail.com",
    "password":"aaaaa"
}
Si se recibiese un json distinto, habría que modificar esta función modificando $datos['email']
y $datos['password'] escribiendo en lugar de usuario y password los nombres de los valores del json recibido en todos los lugares donde aparecen.

La comprobacion que se hace en if($datos[0]['estado'] == "Activo"){ se debe a que en la tabla de usuarios hay una columna llamada estado en la que guardamos un string, y en el ejemplo hemos elegido guardar Activo o Inactivo. Si se quiere verificar si un usuario esta activo de otra manera o no hacerlo, habrá que cambiar dicha comparación. Por ejemplo, si dejar ese campo en blanco significa que el usuario está activo, habría que cambiar dicha linea por esta: if($datos[0]['estado'] == ""){

La linea $password = parent::encriptar($password); esta comentada porque en este ejemplo la base de datos no está encriptada. En caso de estarlo, sería necesario encriptar el passord usando esta función o editandola en clases\conexion\conexion.php.

En la función obtenerDatosUsuario la consulta que se guarda en $query deberá de estar adaptada a la tabla que se quiera usar para hacer el login y al dato que se quiera usar para autentificar. En este caso se usa con un email, pero podría usarse con el nombre de usuario siempre y cuando fuese lo que recibieramos en el json.

En la función insertarToken el insert que se hace esta adaptado para introducir datos en una tabla con los campos: id (el id del token. Autoincremental), usuarioId (el usuario al que pertenece el token), token (el token generado), estado (que debe ser Activo) y fecha (que será la fecha en la que se hace el insert). En el caso de que la tabla de los token sea distinta, habría que modificar el INSERT de esta funcíón.

- Los archivos clases\usuarios.class.php y usuarios.php, clases\productos.class.php y productos.php y clases\pedidos.class.php y pedidos.php son el ejemplo de como gestionar tablas con la API y lo ideal sería usarlos como plantilla para crear otros que gestionen otras tablas. Siempre habrá que crear un archivo php para gestionar la clase y la clase dentro de la carpeta clases para mantener el orden. El ejemplo que voy a usar para explicar el funcionamiento es usuarios.php.
En usuarios.php habrá que cambiar el require_once que hace referencia a la clase usuarios por el que sea y la instancia $_usuarios = new usuarios; por la instancia que toque en función de a la clase a la que miremos (Tener en cuenta que la instancia $_usuarios aparece muchas veces en usuarios.php. Hay que cambiarlo en todos los sitios). El resto es bastante generico. Verificar que los nombres de funciones a las que llamamos de clases\usuarios.class.php sean correctos.
En el caso de clases\usuarios.class.php habrá que ser mas cuidadoso porque aquí se encuentran las consultas
SQL, con lo que habrá que editarlas correctamente para que funcionen con las tablas que se vayan a usar. Importante leer los comentarios en el codigo para comprobar todo lo quye habría que modificar para adaptarlo a otra tabla.

- El script cron\actualizar_token.php se podrá utilizar como cron para desactivar los token que lleven tiempo activos. En el, se puede modificar la fecha de referencia para desactivarlos. En un principio, no necesitaría tocarse nada de él. Simplemente utilizarlo si se desea para programar la tarea desde el servidor.

- Detallo la estructura de la base de datos a la que se ataca desde esta API REST:
	- Base de datos: usuarios
	- Tablas:
		- users: id (PK entero autoincremental), nombre, email, password, estado
		- productos: id (PK entero autoincremental), descripcion, precio
		- pedidos: id (PK entero autoincremental), idusuario, direccion, fecha_pedido, observaciones
		- pedidos_lineas: id (PK entero autoincremental), idpedido, idproducto, descuento, observaciones
		- usuarios_token: id (PK entero autoincremental), usuarioId, token, estado, fecha, oservaciones
